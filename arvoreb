#include <stdio.h>
#include <stdlib.h>



typedef struct tree
{
  int num;
  struct tree* direita;
  struct tree* esquerda;
} Tree;






Tree* createTree()
{

  return NULL;
}


/* Fun��o que verifica se uma �rvore � vazia */
int treeIsEmpty(Tree* t)
{
  /* Retorna 1 se a �rvore for vazia e 0 caso contr�rio */
  return t == NULL;


}


/* Fun��o que mostra a informa��o da �rvore */
void showTree(Tree* t)
{
  /* Essa fun��o imprime os elementos de forma recursiva */

  printf("<"); /* nota��o para organizar na hora de mostrar os elementos */
  if(!treeIsEmpty(t)) /* se a �rvore n�o for vazia... */
  {
    /* Mostra os elementos em pr�-ordem */
    printf("%d ", t->num); /* mostra a raiz */
    showTree(t->direita); /* mostra a sae (sub�rvore � esquerda) */
    showTree(t->esquerda); /* mostra a sad (sub�rvore � direita) */
  }
  printf(">"); /* nota��o para organizar na hora de mostrar os elementos */
}


/* Fun��o que insere um dado na �rvore */
void insertTree(Tree** t)
{
    int num;
    printf("digite o numero que deseja inserir\n");
    scanf("%d", &num);
  /* Essa fun��o insere os elementos de forma recursiva */
  if(*t == NULL)
  {
    *t = (Tree*)malloc(sizeof(Tree)); /* Aloca mem�ria para a estrutura */
    (*t)->direita = NULL; /* Sub�rvore � esquerda � NULL */
    (*t)->esquerda = NULL; /* Sub�rvore � direita � NULL */
    (*t)->num = num; /* Armazena a informa��o */
  } else {
    if(num < (*t)->num) /* Se o n�mero for menor ent�o vai pra esquerda */
    {
      /* Percorre pela sub�rvore � esquerda */
      insertTree(&(*t)->direita, num);
    }
    if(num > (*t)->num) /* Se o n�mero for maior ent�o vai pra direita */
    {
      /* Percorre pela sub�rvore � direita */
      insertTree(&(*t)->esquerda, num);
    }
  }
}


/* Fun��o que verifica se um elemento pertence ou n�o � �rvore */
int isInTree(Tree* t) {

    int num;
    printf("digite o numero que deseja verificar na arvore\n");
    scanf("%d", &num);

  if(treeIsEmpty(t)) { /* Se a �rvore estiver vazia, ent�o retorna 0 */
    return 0;
  }

  /* O operador l�gico || interrompe a busca quando o elemento for encontrado */
  return t->num==num || isInTree(t->direita) || isInTree(t->esquerda);
}
void verificarTee()
{
  if(treeIsEmpty(t)) /* Verifica se a �rvore est� vazia */
  {
    printf("\n\nArvore vazia!!\n");
  } else {
    printf("\n\nArvore NAO vazia!!\n");
  }
}


int main()
{
  Tree* t = createTree(); /* cria uma �rvore */
  int op, op2, n;
  do
  {
      printf("********MENU**********");
      printf("1-inserir\n2-mostar\n3-verificar se a arvore esta vazia\n4-verificar numero da arvore\n");
      scanf("%d", &op);
      switch(op)
      {
      case 1:
          insertTree(&t);
          break;
      case 2:
        showTree(t);
        break;
      case 3:
        verificarTee();
        break;
      case 4:
        isInTree(t);
        break;
      default:
        printf("opcao invalida!!");
      }
      printf("digite 0 se deseja sair ou pressiona qualquer tecla para voltar ao menu\n");
      scanf("%d", &op2);




  }while(op2==0);


  free(t);

  return 0;
}

